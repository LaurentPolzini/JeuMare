# -*- coding: utf-8 -*- """    Plan de l'atelier 2: 3 grilles (voir ci-dessous); 2 fonctions vérifiant la bonne saisie        d'une coordonnée (coord au bon format l.78 et si elle est dans la grille l.65).            En effet l'utilisateur a la possibilité d'entrer des coordonnées                                                     (voir saisie_coord ligne 92)        Il y a en plus une fonction permettant d'afficher une grille spécifique l.105        De plus, il y a 2 fonctions de tests pour une bonne est dûe vérification des 2 fonctions        de vérification de la saisie de coordonnées l.135 et l.151.        Le main testera toutes ces fonctions."""PV : str = '○' # Pion VidePP : str = '☻' # Pion PleinCV : str = ' ' # Case VideNB_PV = 24 # nombre de pions videNB_PP = 24 # nombre de pions pleinJOUEUR = {1: PV, 2 : PP} # repartition des pions selon les 2 joueurs; utile plus tard (atelier 3).grille_depart = [[PP, PP, PP, PP, PP, PP, PV],                 [PP, PP, PP, PP, PP, PV, PV],                  [PP, PP, PP, PP, PV, PV, PV],                  [PP, PP, PP, CV, PV, PV, PV],                 [PP, PP, PP, PV, PV, PV, PV],                 [PP, PP, PV, PV, PV, PV, PV],                 [PP, PV, PV, PV, PV, PV, PV]]grille_milieu = [[PP, CV, PP, CV, PP, CV, CV],                 [CV, PP, CV, PP, PP, PV, PV],                  [CV, CV, PP, PP, PV, PV, CV],                  [CV, PP, CV, CV, PV, PV, CV],                 [CV, CV, CV, PV, PV, PV, CV],                 [PP, PP, CV, PV, CV, CV, CV],                 [CV, PV, PV, CV, CV, CV, CV]]"""    Enchainement possible des pions pleins et des pions vides    mettant fin à la partie en 1 coup (plutot plusieurs sauts mais en 1 seul enchainement)"""grille_fin = [[CV, CV, CV, CV, CV, CV, CV],              [CV, PP, CV, PP, PP, PV, CV],               [CV, CV, CV, PP, CV, CV, PV],               [CV, CV, CV, CV, CV, PV, CV],              [CV, CV, CV, CV, PV, PV, CV],              [CV, PP, PV, PP, CV, CV, CV],              [CV, PV, PP, CV, CV, PP, CV]]"""    Fonction qui vérifie que les coordonnées appartiennent effectivement à la grille.        La grille est de taille 7 * 7, elle s'étend donc de la case A1 à G7.        Compare le code Ascii et retourne un booleen"""def est_dans_grille(ligne : str, colonne : int) -> bool:     if len(str(ligne)) != 1 or len(str(colonne)) != 1:        return False        return (ord('A') <= ord(str(ligne).upper()) <= ord('G') and \            ord('1') <= ord(str(colonne)) <= ord('7'))"""    Fonction ayant pour but de vérifier le bon formatage de l'utilisateur lorsqu'il entre        des informations. Z6 est au bon format meme si pas dans la grille.                99 ni AA sont au bon format"""def est_au_bon_format(coord : str) -> bool: #compare le code Ascii et retourne un booleen    coord = str(coord)    if len(str(coord)) != 2:        return False            return (ord('A') <= ord(str(coord[0]).upper()) <= ord('Z')) and \        (48 <= ord(str(coord[1])) <= 57)"""    Fonction demandant à l'utilisateur de saisir des coordonnées. Il va sans dire qu'elles        appartiendront à la grille -nous utiliserons les fonctions précédentes-."""def saisir_coord() -> str:    coord = str(input("Entrez une coordonnée valide (entre A1 et G7): "))    while not (est_au_bon_format(coord) or est_dans_grille(coord[0], coord[1])):        coord = str(input("Entrez une coordonnée valide (entre A1 et G7): "))        coord = coord[0].upper() + coord[1] # au cas ou l'utilisateur aurait entré une lettre minuscule    return coord"""    Fonction qui affiche la grille."""def affiche_grille(grille):    for i in range(1, 8):        print(f"\t| {i}", end="")       for i in range(65, 72): # on utilisera i comme code ascii, d'où ces nombres "aléatoires"        print("\n", end="")        for k in range(8):            print("----", end = "")        print("--\n", end="") # J'affiche 2 traits car sous Mac la ligne serait trop                                    #trop courte sans, sous Windows elle peut etre un peu                                    #plus longue car sous Windows il y a un écart entre 2 "-"               print(chr(i), end="")        for j in range(1, 8):            print("\t| {}" .format(grille[i-65][j-1]), end="")        print("\n")    print("\nJoueur 1: ○        Joueur 2: ☻ \n")"""    Fonctions de test associées nominalement.""""""    Vérifie que les cases entrées sont bien dans la grille (de A1 à G7)"""def test_est_dans_grille():    print("\nTest de la fonction est_dans_grille...")    assert not est_dans_grille("X", 32)    assert est_dans_grille("B", 2)    assert not est_dans_grille("C", 8)    assert not est_dans_grille(8, 1)    assert not est_dans_grille(0, "A")    assert not est_dans_grille((), ())    assert est_dans_grille("a", 5)    print("Ok !")"""    Rappel: bon format = LETTRE (maj) + chiffre : U9 est au bon format meme si        cette case n'est pas dans la grille"""def test_est_au_bon_format():    print("\nTest de la fonction est_au_bon_format...")    assert not est_au_bon_format("22")    assert est_au_bon_format("Y2")    assert not est_au_bon_format(-9999)    assert not est_au_bon_format("3U")    assert not est_au_bon_format("DC")    assert not est_au_bon_format(())    assert est_au_bon_format("z9")    print("Ok !")if __name__ == "__main__":    test_est_dans_grille()    test_est_au_bon_format()    saisie_grille = str(input\        ("Pour afficher une grille: debut(1), milieu(2) ou fin(3), sinon: n: ")).lower()    if saisie_grille == "debut" or saisie_grille == 1:        affiche_grille(grille_depart)    elif saisie_grille == "milieu" or saisie_grille == 2:        affiche_grille(grille_milieu)    elif saisie_grille == "fin" or saisie_grille == 3:        affiche_grille(grille_fin)            saisir_coord() # A retirer ou mettre en commentaire pour ne pas entrer de coordonnées