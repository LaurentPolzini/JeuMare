# -*- coding: utf-8 -*- grille_depart = [["☻", "☻", "☻", "☻", "☻", "☻", "○"],                 ["☻", "☻", "☻", "☻", "☻", "○", "○"],                  ["☻", "☻", "☻", "☻", "○", "○", "○"],                  ["☻", "☻", "☻", "", "○", "○", "○"],                 ["☻", "☻", "☻", "○", "○", "○", "○"],                 ["☻", "☻", "○", "○", "○", "○", "○"],                 ["☻", "○", "○", "○", "○", "○", "○"]]grille_milieu = [["☻", "", "☻", "", "☻", "", ""],                 ["", "☻", "", "☻", "☻", "○", "○"],                  ["", "", "☻", "☻", "○", "○", ""],                  ["", "☻", "", "", "○", "○", ""],                 ["", "", "", "○", "○", "○", ""],                 ["☻", "☻", "○", "○", "", "", ""],                 ["", "○", "○", "", "", "", ""]]"""    Enchainement possible des Noirs et des Blancs mettant fin à la partie en 1 coup                                        (plutot plusieurs sauts mais en 1 seul enchainement)"""grille_fin = [["", "", "", "", "", "", ""],              ["", "☻", "", "☻", "☻", "○", ""],               ["", "", "", "☻", "", "", "○"],               ["", "", "", "", "", "○", ""],              ["", "", "", "", "○", "○", ""],              ["", "☻", "○", "☻", "", "", ""],              ["", "○", "☻", "", "", "☻", ""]]"""    Fonction qui vérifie que les coordonnées appartiennent effectivement à la grille.        La grille est de taille 7 * 7, elle s'étend donc de la case A1 à G7."""def est_dans_grille(ligne, colonne): #compare le code Ascii et retourne un booleen    if len(str(ligne)) != 1 or len(str(colonne)) != 1:        return False        return (ord("A") <= ord(str(ligne)) <= ord("G") and ord("1") <= ord(str(colonne)) <= ord("7"))"""    Fonction ayant pour but de vérifier le bon formatage de l'utilisateur lorsqu'il entre        des informations."""def est_au_bon_format(coord): #compare le code Ascii et retourne un booleen    coord = str(coord)    if len(str(coord)) != 2:        return False            return (65 <= ord(str(coord[0])) <= 90) and (48 <= ord(str(coord[1])) <= 57)"""    Fonction demandant à l'utilisateur de saisir des coordonnées. Il va sans dire qu'elles        appartiendront à la grille -nous utiliserons les fonctions précédentes-."""def saisir_coord():    coord = str(input("Entrez une coordonnée valide (ex: B2): "))    while not (est_au_bon_format(coord)):        coord = str(input("Entrez une coordonnée valide (ex: B2): "))    while not (est_dans_grille(coord[0], coord[1])):        coord = str(input("Entrez une coordonnée valide (ex: B2): "))        """    Fonction qui affiche la grille."""def affiche_grille(grille):    for i in range(1, 8):        print(f"\t | {i}", end="")    print("\n-----------------------------------")    for i in range(65, 72):        print(chr(i), end="")        for j in range(1, 8):            print("\t | {}" .format(grille[i-65][j-1]), end="")        print("\n-----------------------------------")"""    Fonctions de test associées nominalement."""def test_est_dans_grille():    print("\nTest de la fonction est_dans_grille...")    assert not est_dans_grille("X", 32)    assert est_dans_grille("B", 2)    assert not est_dans_grille("C", 8)    assert not est_dans_grille(8, 1)    assert not est_dans_grille(0, "A")    assert not est_dans_grille((), ())    print("Ok !")"""    Rappel: bon format= LETTRE (maj) + chiffre: U9 est au bon format meme si        cette case n'est pas dans la grille"""def test_est_au_bon_format():    print("\nTest de la fonction est_au_bon_format...")    assert not est_au_bon_format("22")    assert est_au_bon_format("Y2")    assert not est_au_bon_format(-9999)    assert not est_au_bon_format("3U")    assert not est_au_bon_format("DC")    assert not est_au_bon_format(())    print("Ok !")        if __name__ == "__main__":    test_est_dans_grille()    test_est_au_bon_format()    affiche_grille(grille_fin)